// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/korifi/controllers/api/v1alpha1"
	"code.cloudfoundry.org/korifi/controllers/controllers/services"
)

type VCAPServicesSecretBuilder struct {
	BuildVcapServicesEnvValueStub        func(context.Context, *v1alpha1.CFApp) (string, error)
	buildVcapServicesEnvValueMutex       sync.RWMutex
	buildVcapServicesEnvValueArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.CFApp
	}
	buildVcapServicesEnvValueReturns struct {
		result1 string
		result2 error
	}
	buildVcapServicesEnvValueReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *VCAPServicesSecretBuilder) BuildVcapServicesEnvValue(arg1 context.Context, arg2 *v1alpha1.CFApp) (string, error) {
	fake.buildVcapServicesEnvValueMutex.Lock()
	ret, specificReturn := fake.buildVcapServicesEnvValueReturnsOnCall[len(fake.buildVcapServicesEnvValueArgsForCall)]
	fake.buildVcapServicesEnvValueArgsForCall = append(fake.buildVcapServicesEnvValueArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.CFApp
	}{arg1, arg2})
	stub := fake.BuildVcapServicesEnvValueStub
	fakeReturns := fake.buildVcapServicesEnvValueReturns
	fake.recordInvocation("BuildVcapServicesEnvValue", []interface{}{arg1, arg2})
	fake.buildVcapServicesEnvValueMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *VCAPServicesSecretBuilder) BuildVcapServicesEnvValueCallCount() int {
	fake.buildVcapServicesEnvValueMutex.RLock()
	defer fake.buildVcapServicesEnvValueMutex.RUnlock()
	return len(fake.buildVcapServicesEnvValueArgsForCall)
}

func (fake *VCAPServicesSecretBuilder) BuildVcapServicesEnvValueCalls(stub func(context.Context, *v1alpha1.CFApp) (string, error)) {
	fake.buildVcapServicesEnvValueMutex.Lock()
	defer fake.buildVcapServicesEnvValueMutex.Unlock()
	fake.BuildVcapServicesEnvValueStub = stub
}

func (fake *VCAPServicesSecretBuilder) BuildVcapServicesEnvValueArgsForCall(i int) (context.Context, *v1alpha1.CFApp) {
	fake.buildVcapServicesEnvValueMutex.RLock()
	defer fake.buildVcapServicesEnvValueMutex.RUnlock()
	argsForCall := fake.buildVcapServicesEnvValueArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *VCAPServicesSecretBuilder) BuildVcapServicesEnvValueReturns(result1 string, result2 error) {
	fake.buildVcapServicesEnvValueMutex.Lock()
	defer fake.buildVcapServicesEnvValueMutex.Unlock()
	fake.BuildVcapServicesEnvValueStub = nil
	fake.buildVcapServicesEnvValueReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *VCAPServicesSecretBuilder) BuildVcapServicesEnvValueReturnsOnCall(i int, result1 string, result2 error) {
	fake.buildVcapServicesEnvValueMutex.Lock()
	defer fake.buildVcapServicesEnvValueMutex.Unlock()
	fake.BuildVcapServicesEnvValueStub = nil
	if fake.buildVcapServicesEnvValueReturnsOnCall == nil {
		fake.buildVcapServicesEnvValueReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.buildVcapServicesEnvValueReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *VCAPServicesSecretBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildVcapServicesEnvValueMutex.RLock()
	defer fake.buildVcapServicesEnvValueMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *VCAPServicesSecretBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.VCAPServicesSecretBuilder = new(VCAPServicesSecretBuilder)
